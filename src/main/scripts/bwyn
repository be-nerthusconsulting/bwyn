#!/bin/bash

ERROR=1

initVariables() {
  TO="HEAD"
  VERBOSE=0
}

usage() {
  echo "bwyn [--from=<from_ref>] [--to=<to_ref>] [--verbose] <mvn_goals>"
  echo "       Executes <mvn_goals> on Maven modules impacted between <from_ref> and <to_ref>"
  echo "       --from=<from_ref>    git ref from which to look for Maven modules having been modified"
  echo "                            when not given, last build git ref in .bwyn/lastBuild file is used"
  echo "                            when no last build information found, doesn't limit projects list (even when --to option is given)"
  echo "       --to=<to_ref>        git ref upto which to look for Maven modules having been modified"
  echo "                            when not given, HEAD is used"
  echo "       --verbose            whether to print out logs or not"
  echo "       <mvn_goals>          typical Maven goals (clean package...)"
  echo "     --help"
  echo "       Shows bwyn usage"
}

misusage() {
  usage
  exit $ERROR
}

parseArguments() {
  local argsParsed=0
  while [[ $# -gt 0 ]] && [[ $argsParsed -eq 0 ]]; do
    case "$1" in
      --from=*)
        FROM="${1#*=}"
        ;;
      --to=*)
        TO="${1#*=}"
        ;;
      --verbose)
        VERBOSE=1
        ;;
      --help)
        misusage
        ;;
      *)
        MVN_GOALS=$*
        argsParsed=1
    esac
    shift
  done

  if [[ $argsParsed -eq 0 ]]; then
    echo "No maven goals provided!"
    misusage
  fi
}

readLastBuildRef() {
  if [[ -f ".bwyn/lastBuild" ]] && [[ -z "$FROM" ]]; then
    [[ $VERBOSE == 1 ]] && echo "Getting 'from ref' from last build"
    FROM=$(cat ".bwyn/lastBuild")
  fi
}

readSourceModifiedModules() {
  git diff --name-status "$FROM" "$TO" | grep "src" | sed 's/src.*//' | sed 's/[AMDR][0-9]*//' | uniq | tr '\n' ',' | tr -d '[:space:]'
}

readPomModifiedModules() {
  git diff --name-status "$FROM" "$TO" | grep "pom.xml" | sed 's/pom\.xml//' | sed 's/[AMDR][0-9]*//' | uniq | tr '\n' ',' | tr -d '[:space:]'
}

readProjectList() {
  if [[ -n "$FROM" ]]; then
    local sourceModifiedModules
    sourceModifiedModules=$(readSourceModifiedModules)
    local pomModifiedModules
    pomModifiedModules=$(readPomModifiedModules)

    local mvnProjectList
    if [[ -n "$sourceModifiedModules" ]]; then
      mvnProjectList="$sourceModifiedModules"
    fi

    if [[ -n "$pomModifiedModules" ]]; then
      mvnProjectList="$mvnProjectList$pomModifiedModules"
    fi

    if [[ -z "$mvnProjectList" ]]; then
      echo "No changes found, not building"
      exit 0
    else
      MVN_GOALS="$MVN_GOALS --pl $mvnProjectList -amd"
    fi
  fi
}

executeMvnCommand() {
  [[ $VERBOSE == 1 ]] && echo "Executing 'mvn $MVN_GOALS'"

  # shellcheck disable=SC2086
  mvn $MVN_GOALS
}

updateLastBuildRef() {
  [[ $VERBOSE == 1 ]] && echo "Updating last build git ref"

  if ! [[ -d ".bwyn" ]]; then
    [[ $VERBOSE == 1 ]] && echo "Creating '.bwyn' directory"

    mkdir ".bwyn"
  fi

  git rev-parse "$TO" > ".bwyn/lastBuild"
}

initVariables
parseArguments "$@"
readLastBuildRef
readProjectList
executeMvnCommand
updateLastBuildRef
