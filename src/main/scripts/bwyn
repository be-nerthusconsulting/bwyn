#!/bin/bash

ERROR=1

initVariables() {
  to="HEAD"
  verbose=0
}

usage() {
  echo "bwyn [--from=<from_ref>] [--to=<to_ref>] [--verbose] <mvn_goals>"
  echo "       Executes <mvn_goals> on Maven modules impacted between <from_ref> and <to_ref>"
  echo "       --from=<from_ref>    git ref from which to look for Maven modules having been modified"
  echo "                            when not given, last build git ref in .bwyn/lastBuild file is used"
  echo "                            when no last build information found, doesn't limit projects list (even when --to option is given)"
  echo "       --to=<to_ref>        git ref upto which to look for Maven modules having been modified"
  echo "                            when not given, HEAD is used"
  echo "       --verbose            whether to print out logs or not"
  echo "       <mvn_goals>          typical Maven goals (clean package...)"
  echo "     --help"
  echo "       Shows bwyn usage"
}

misusage() {
  usage
  exit $ERROR
}

parseArguments() {
  argsParsed=0
  while [[ $# -gt 0 ]] && [[ $argsParsed -eq 0 ]]; do
    case "$1" in
      --from=*)
        from="${1#*=}"
        ;;
      --to=*)
        to="${1#*=}"
        ;;
      --verbose)
        verbose=1
        ;;
      --help)
        misusage
        ;;
      *)
        mvnGoals=$*
        argsParsed=1
    esac
    shift
  done

  if [[ $argsParsed -eq 0 ]]; then
    echo "No maven goals provided!"
    misusage
  fi
}

readLastBuildRef() {
  if [[ -f ".bwyn/lastBuild" ]] && [[ -z "$from" ]]; then
    [[ $verbose == 1 ]] && echo "Getting 'from ref' from last build"
    from=$(cat ".bwyn/lastBuild")
  fi
}

readProjectList() {
  if [[ -n "$from" ]]; then
    mvnProjectList="$(git diff \
                        --name-status "$from" "$to" \
                        | grep "src" \
                        | sed 's/src.*//' \
                        | sed 's/[AMDR][0-9]*//' \
                        | uniq \
                        | tr '\n' ',' \
                        | tr -d '[:space:]')"

    if [[ -z "$mvnProjectList" ]]; then
      echo "No changes found, not building"
      exit 0
    else
      mvnGoals="$mvnGoals --pl $mvnProjectList -amd"
    fi
  fi
}

executeMvnCommand() {
  [[ $verbose == 1 ]] && echo "Executing 'mvn $mvnGoals'"

  # shellcheck disable=SC2086
  mvn $mvnGoals
}

updateLastBuildRef() {
  [[ $verbose == 1 ]] && echo "Updating last build git ref"

  if ! [[ -d ".bwyn" ]]; then
    [[ $verbose == 1 ]] && echo "Creating '.bwyn' directory"

    mkdir ".bwyn"
  fi

  git rev-parse "$to" > ".bwyn/lastBuild"
}

initVariables
parseArguments "$@"
readLastBuildRef
readProjectList
executeMvnCommand
updateLastBuildRef
