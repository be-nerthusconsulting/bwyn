#!/bin/bash

absoluteDirectoryPath() {
  local path=$1
  cd "$(dirname "$path")" && pwd -P
}

timestamp() {
  date +%s
}

dateTime() {
  date "+%Y-%m-%d %T"
}

log() {
  local message=$1
  echo "[$(dateTime)] $message"
}

logTestEnvironment() {
  log "Test environment:"
  log "* SOURCE_DIRECTORY=$SOURCE_DIRECTORY"
  log "* TEST_DIRECTORY=$TEST_DIRECTORY"
  log "* TEST_SCRIPTS_DIRECTORY=$TEST_SCRIPTS_DIRECTORY"
  log "* TEST_RESOURCES_DIRECTORY=$TEST_RESOURCES_DIRECTORY"
  log "* TEST_RUN_DIRECTORY=$TEST_RUN_DIRECTORY"
  log "* TEST_LOG=$TEST_LOG"
  echo ""
}


SOURCE_DIRECTORY="$(absoluteDirectoryPath "${BASH_SOURCE[0]}")/../.."
TEST_DIRECTORY="$SOURCE_DIRECTORY/test"
TEST_SCRIPTS_DIRECTORY="$TEST_DIRECTORY/scripts"
TEST_RESOURCES_DIRECTORY="$TEST_DIRECTORY/resources"
TEST_RUN_DIRECTORY="$TEST_DIRECTORY/run"
TEST_LOG="$TEST_RUN_DIRECTORY/bwyn_test-$(timestamp).log"

BWYN="$SOURCE_DIRECTORY/main/scripts/bwyn"

oneTimeSetUp() {
  logTestEnvironment >> "$TEST_LOG"

  mkdir "$TEST_RUN_DIRECTORY" &> /dev/null
  touch "$TEST_LOG" &> /dev/null
}

copySampleProject() {
  local targetDirectory="$1"
  log "Copy sample project into '$targetDirectory'"
  cp -R "$TEST_RESOURCES_DIRECTORY/sample/." "$targetDirectory"
  echo ""
}

initGitRepository() {
  log "Initialize Git repository"
  git init
  git add -A
  git commit -m "Initial commit"
  echo ""
}

compileProject() {
  mvn clean compile
}

workInSampleProject() {
  local tempDirectory
  tempDirectory=$(mktemp -d)
  cd "$tempDirectory" || exit

  {
    copySampleProject "$tempDirectory"; \
    initGitRepository; \
    compileProject;
  } >> "$TEST_LOG"

  echo "$tempDirectory"
}

setUp() {
  set -o pipefail

  WORK_DIRECTORY=$(workInSampleProject)
}

backToInitialDirectory() {
  log "Going back to initial directory '$TEST_SCRIPTS_DIRECTORY'"
  cd "$TEST_SCRIPTS_DIRECTORY" || exit
  echo ""
}

cleanUpTempDirectory() {
  log "Cleaning up temp directory '$WORK_DIRECTORY'"
  rm -rf "$WORK_DIRECTORY"
  echo ""
}

tearDown() {
  backToInitialDirectory >> "$TEST_LOG"
  cleanUpTempDirectory >> "$TEST_LOG"
  set +o pipefail
  echo ""
}

fileTimestamp() {
  local file=$1
  date -r "$file" +%s
}

extractFilesLastModificationTimestamps() {
  find . -name "*.class" -exec bash -c "date -r {} \"+{} %s\"" \;
}

testInvalidUsage_whenNoMavenGoalsProvided_thenExitCodeShouldBeOne() {
  cd "$WORK_DIRECTORY" || exit

  $BWYN --from=HEAD --to=HEAD --verbose
  local exitCode=$?

  assertEquals 1 $exitCode
}

testUnchanged_whenNothingChanged_thenExitCodeShouldBeZero() {
  cd "$WORK_DIRECTORY" || exit

  $BWYN --from=HEAD --to=HEAD clean compile
  local exitCode=$?

  assertEquals 0 $exitCode
}

testUnchanged_whenNothingChanged_thenCompiledFilesUnchanged() {
  cd "$WORK_DIRECTORY" || exit

  local beforeClassFilesTimestamps
  beforeClassFilesTimestamps=$(extractFilesLastModificationTimestamps)

  $BWYN --from=HEAD --to=HEAD clean compile
  local afterClassFilesTimestamps
  afterClassFilesTimestamps=$(extractFilesLastModificationTimestamps)

  assertEquals "$beforeClassFilesTimestamps" "$afterClassFilesTimestamps"
}

testChanged_whenNonDependencyModuleChanged_thenOnlyThatModuleCompiled() {
  cd "$WORK_DIRECTORY" || exit

  cp ModifiedClassC module-c/src/main/java/ClassC.java
  git commit -am "Modified non dependency module"

  local beforeClassFilesTimestamps
  beforeClassFilesTimestamps=$(extractFilesLastModificationTimestamps)

  $BWYN --from=HEAD^ --to=HEAD clean compile
  local afterClassFilesTimestamps
  afterClassFilesTimestamps=$(extractFilesLastModificationTimestamps)

  local diff
  diff=$(comm -13 <(echo "$beforeClassFilesTimestamps" | sort) <(echo "$afterClassFilesTimestamps" | sort))
  local diffCount
  diffCount=$(echo "$diff" | wc -l | xargs)

  assertEquals 1 "$diffCount"
  assertContains "$diff" "ClassC"
}

testChanged_whenDependencyModuleChanged_thenAlsoDependentModuleCompiled() {
  cd "$WORK_DIRECTORY" || exit

  cp ModifiedClassA module-a/src/main/java/ClassA.java
  git commit -am "Modified dependency module"

  local beforeClassFilesTimestamps
  beforeClassFilesTimestamps=$(extractFilesLastModificationTimestamps)

  $BWYN --from=HEAD^ --to=HEAD clean compile
  local afterClassFilesTimestamps
  afterClassFilesTimestamps=$(extractFilesLastModificationTimestamps)

  local diff
  diff=$(comm -13 <(echo "$beforeClassFilesTimestamps" | sort) <(echo "$afterClassFilesTimestamps" | sort))
  local diffCount
  diffCount=$(echo "$diff" | wc -l | xargs)

  assertEquals 2 "$diffCount"
  assertContains "$diff" "ClassA"
  assertContains "$diff" "ClassB"
}

. shunit2 | tee -a "$TEST_LOG"